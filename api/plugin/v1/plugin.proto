/*
Copyright 2021 The tKeel Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package api.plugin.v1;

import "openapi/v1/openapi.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/tkeel-io/tkeel/api/plugin/v1;v1";
option java_multiple_files = true;
option java_package = "api.plugin.v1";

service Plugin {
  rpc RegisterPlugin(RegisterPluginRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/plugins"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "注册插件接口"
      operation_id : "RegisterPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "204"
          value : {description : "SUCC_AND_NO_CONTENT"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "404"
          value : {description : "PLUGIN_NOT_FOUND"}
        },
        {
          key : "409"
          value : {description : "ALREADY_EXISTS"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_QUERY_PLUGIN_OPENAPI"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_STORE"}
        }
      ]
    };
  };
  rpc DeletePlugin(DeletePluginRequest) returns (DeletePluginResponse) {
    option (google.api.http) = {
      delete : "/plugins/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "删除插件接口"
      operation_id : "DeletePlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "404"
          value : {description : "PLUGIN_NOT_FOUND"}
        },
        {
          key : "500"
          value : {description : "DELETE_PLUGIN_HAS_BEEN_DEPENDED"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
  rpc GetPlugin(GetPluginRequest) returns (GetPluginResponse) {
    option (google.api.http) = {
      get : "/plugins/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "查询插件接口"
      operation_id : "GetPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "404"
          value : {description : "PLUGIN_NOT_FOUND"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
  rpc ListPlugin(google.protobuf.Empty) returns (ListPluginResponse) {
    option (google.api.http) = {
      get : "/plugins"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary : "获取插件列表接口"
      operation_id : "ListPlugin"
      tags : "Plugin"
      responses : [
        {
          key : "200"
          value : {description : "OK"}
        },
        {
          key : "400"
          value : {description : "INVALID_ARGUMENT"}
        },
        {
          key : "500"
          value : {description : "INTERNAL_ERROR"}
        }
      ]
    };
  };
}

/**
 * Register Addons.
 **/
message RegisterAddons {
  string addons = 1;   // addons name.
  string upstream = 2; // upstream path.
}

/**
 * plugin object.
 **/
message PluginObject {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ]; // plugin id.
  string plugin_version = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin version"
      } ]; // plugin version.
  string tkeel_version = 3
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin depend tkeel version"
      } ]; // plugin depend tkeel version.
  repeated openapi.v1.AddonsPoint addons_point = 4
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin declares addons"
      } ]; // plugin declares addons.
  repeated openapi.v1.ImplementedPlugin implemented_plugin = 5
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin implemented plugin list"
      } ]; // plugin implemented plugin list.
  string secret = 6
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin registered secret"
      } ]; // plugin registered secret.
  int64 register_timestamp = 7
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "register timestamp"
      } ]; // register timestamp.
  repeated string active_tenantes = 8
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "active tenant's id list"
      } ]; // active tenant's id list.
  repeated RegisterAddons register_addons = 9
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "register addons router"
      } ]; // register addons router.
  openapi.v1.PluginStatus status = 10
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "register plugin status"
      } ]; // register plugin status.
}

message RegisterPluginRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
  string secret = 2
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin registered secret"
      } ];
}

message DeletePluginRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
}
message DeletePluginResponse {
  PluginObject plugin = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object"
      } ];
}

message GetPluginRequest {
  string id = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin id"
      } ];
}
message GetPluginResponse {
  PluginObject plugin = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object"
      } ];
}

message ListPluginResponse {
  repeated PluginObject plugin_list = 1
      [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
        description : "plugin object list"
      } ];
}